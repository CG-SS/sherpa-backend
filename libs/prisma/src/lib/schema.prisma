generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  @@map("events")

  id String @id @default(uuid()) @db.Uuid

  name      String
  date      DateTime  @db.Timestamptz
  isOutside Boolean   @map("is_outside")

  // An event can have many attendees.
  attendees Attendee[]

  // An event is organized by an organizer.
  organizer   Organizer @relation(fields: [organizerId], references: [id])
  organizerId String    @map("organizer_id") @db.Uuid

  // An event may happen during a weather.
  weather Weather?

  // Logging.
  createdAt DateTime @default(now())  @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt       @map("updated_at") @db.Timestamptz
}

model Attendee {
  @@map("attendees")

  id String @id @default(uuid()) @db.Uuid

  name  String
  age   Int

  // An attendee can attend many events.
  events Event[]

  // Logging.
  createdAt DateTime @default(now())  @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt       @map("updated_at") @db.Timestamptz
}

model Organizer {
  @@map("organizers")

  id String @id @default(uuid()) @db.Uuid

  name String

  // An organizer might organize an event.
  event Event?

  // Logging.
  createdAt DateTime @default(now())  @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt       @map("updated_at") @db.Timestamptz
}

model Weather {
  @@map("weathers")

  id String @id @default(uuid()) @db.Uuid

  temperatureInDegreesCelcius Int @map("temperature_in_degrees_celcius")
  chanceOfRain                Int @map("chance_of_rain")

  // A weather is predicted under an event.
  event   Event   @relation(fields: [eventId], references: [id])
  eventId String  @map("event_id") @db.Uuid

  // Logging.
  createdAt DateTime @default(now())  @map("created_at") @db.Timestamptz
}
